[user]
  name = username
  email = username@example.com
[core]
  excludesfile = /Users/user/.gitignore_global
  autocrlf = false
  safecrlf = true
  quotepath = false
  preloadindex = true
[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 
[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true
[color]
  status = auto
  branch = auto
  interactive = auto
  diff = auto
  ui = auto
[push]
  default = tracking
[rerere]
  enable = true
[alias]
  ; convenience aliases
  br = branch -avv
  bra = branch -a
  brs = branch -av
  brr = "!for i in `git ls-remote -h origin | awk 'BEGIN {FS=\"/\"} $0 ~ /heads/ {print \"origin/\" $3}'`; do git log --format='%at %ad - '`echo $i`' - %aN' -n 1 $i; done|sort -r;"
  brn = "!for i in `git ls-remote -h origin | awk 'BEGIN {FS=\"/\"} $0 ~ /heads/ {print \"origin/\" $3}'`; do git log --format='%at %ad - '`echo $i`' - %aN' -n 1 $i; done | awk '{if (length($4) == 1) {$4 = \"0\" $4;}; print $0;}'" | sed 's/\\(.*\\) - \\([^-]*\\)$/\\2 - \\1/g' | sort
  cp = cherry-pick
  ci = commit
  cl = clone
  clog = "!git lg1s $(git tag -l vC* |tail -n 1)..origin/master"
  co = checkout
  dc = diff --cached
  ft = fetch --all -p
  ftt = fetch --all -p -t
  st = status -s
  root = rev-parse --show-toplevel

  ; log aliases
  lg = log --pretty --oneline --graph
  lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(black)%s%C(reset) %C(dim black)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg1d = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg1s = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(black)%s%C(reset) %C(dim black)- %an%C(reset)%C(bold yellow)%d%C(reset)'
  lg1sa = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ad)%C(reset) %C(black)%s%C(reset) %C(dim black)- %an%C(reset)%C(bold yellow)%d%C(reset)'
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset) %C(dim black)- %an%C(reset)' --all
  lg2s = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(black)%s%C(reset) %C(dim black)- %an%C(reset)'
  lg2d = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg2ds = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  lg3 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  lg4 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) ]%Creset' --abbrev-commit --date=relative
  lg0 = "! git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(black)%s%C(reset) %C(dim black)- %an%C(reset)%C(bold yellow)%d%C(reset)'  --tags --branches=ref/remotes/origin/master `git tag|tail -n 1`^..refs/heads/master 2> /dev/null"

; gitignore from https://www.gitignore.io/docs
  ignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"

  ; files that changed in branch
  fc = "!git diff $(git merge-base origin/master $@)..$@ --name-status"

; stuff from http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
  ; log
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  le = log --oneline --decorate
  ; file history
  filelog = log -u
  fl = log -u
  ; recent history
  dl = "!git ll -1"
  dlc = diff --cached HEAD^
  dr  = "!f() { git diff "$1"^.."$1"; }; f"
  lc  = "!f() { git ll "$1"^.."$1"; }; f"
  diffr  = "!f() { git diff "$1"^.."$1"; }; f"
  ; find files and content inside files
  f = "!git ls-files | grep -i"
  grep = grep -Ii
  gr = grep -Ii
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  ; list aliases
  la = "!git config -l | grep alias | cut -c 7-"
  ; rename branch to done-branch
  done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
  ; tag aliases
  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0
  ; merge aliases
  ours = "!f() { git co --ours $@ && git add $@; }; f"
  theirs = "!f() { git co --theirs $@ && git add $@; }; f"
  ; reset aliases
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  ; stash
  sl = stash list
  sa = stash apply
  ss = stash save

  ;; HID Aliases

  ; list drush features that need to be reverted
  dr0 = "!echo 'changed features since '$(git describe $(git rev-list --tags='vC[0-9|\\-]*P[0-9|\\-]*' --max-count=1))' listed below:'; git diff $(git describe $(git rev-list --tags='vC[0-9|\\-]*P[0-9|\\-]*' --max-count=1))..origin/master --name-only | gawk '$0 ~ /hid_features/ {print gensub(/.*hid_features\\/([^/]*)\\/.*/, \"\\\\1\", \"g\", $0);}' | uniq | sort"
  fr = "!echo 'changed features in the current branch (based on origin/master):'; git diff $(git merge-base HEAD origin/master)..HEAD --name-only | gawk '$0 ~ /hid_features/ {print gensub(/.*hid_features\\/([^/]*)\\/.*/, \"\\\\1\", \"g\", $0);}' | uniq | sort"

  ; get the last hook_update_n on origin/master
  hun = "!git ls-tree -r origin/master -- $(git rev-parse --show-toplevel)/hid/sites/all/modules/custom/hid_deployment/hid_deployment.install.d  | tail -n 1 | awk '{print $4}' | sed 's/.*\\///g'"

[filter "media"]
  required = true
  clean = git-media-clean %f
  smudge = git-media-smudge %f
[filter "hawser"]
  clean = git hawser clean %f
  smudge = git hawser smudge %f
  required = true
[gpg]
  program = gpg
[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true
[diff]
  renameLimit = 3000
